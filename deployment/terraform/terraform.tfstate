{
  "version": 4,
  "terraform_version": "1.10.5",
  "serial": 52,
  "lineage": "c6e6b2d4-d25a-a5fd-93fe-900c42e14cff",
  "outputs": {
    "api_url": {
      "value": "https://1tdy3c2ms1.execute-api.ap-south-1.amazonaws.com/weather",
      "type": "string"
    },
    "source_bucket": {
      "value": "weather-source-56qa0x06",
      "type": "string"
    },
    "step_function_arn": {
      "value": "arn:aws:states:ap-south-1:396907900627:stateMachine:weather-app-deploy",
      "type": "string"
    },
    "website_url": {
      "value": "http://weather-app-56qa0x06.s3-website.ap-south-1.amazonaws.com",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "archive_file",
      "name": "deploy_zip",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exclude_symlink_directories": null,
            "excludes": null,
            "id": "9b2ab23135799a26f085ad04af14e788bb83ffc7",
            "output_base64sha256": "jIlbUKI7jtpJCmJ3dCyjXUxIgZzouGJxo9/xVTK0s2Q=",
            "output_base64sha512": "cZQ2un3IszUimFzBIFHfs7mCfVNe3cubuAXzEviTT3UxcMlAOF85kKyMhX7hcJHQkiBGkLE4itaFqyOznR9Auw==",
            "output_file_mode": null,
            "output_md5": "35b2768eaa76c60e34701a20249d45fd",
            "output_path": "deploy-function.zip",
            "output_sha": "9b2ab23135799a26f085ad04af14e788bb83ffc7",
            "output_sha256": "8c895b50a23b8eda490a6277742ca35d4c48819ce8b86271a3dff15532b4b364",
            "output_sha512": "719436ba7dc8b33522985cc12051dfb3b9827d535eddcb9bb805f312f8934f753170c940385f3990ac8c857ee17091d092204690b1388ad685ab23b39d1f40bb",
            "output_size": 1025,
            "source": [
              {
                "content": "const AWS = require('aws-sdk');\nconst fs = require('fs');\nconst archiver = require('archiver');\n\nconst lambda = new AWS.Lambda();\nconst s3 = new AWS.S3();\n\nexports.handler = async (event) =\u003e {\n    const action = event.action;\n    \n    try {\n        if (action === 'update_lambda') {\n            await updateLambdaFunction();\n            return { statusCode: 200, body: 'Lambda updated successfully' };\n        } else if (action === 'update_s3') {\n            await updateS3Website();\n            return { statusCode: 200, body: 'S3 updated successfully' };\n        }\n    } catch (error) {\n        console.error('Deployment error:', error);\n        return { statusCode: 500, body: `Error: ${error.message}` };\n    }\n};\n\nasync function updateLambdaFunction() {\n    // Download source from S3\n    const sourceKey = 'weather-function.js';\n    const sourceBucket = process.env.SOURCE_BUCKET;\n    \n    const sourceCode = await s3.getObject({\n        Bucket: sourceBucket,\n        Key: sourceKey\n    }).promise();\n    \n    // Create zip buffer\n    const zipBuffer = await createZipBuffer(sourceCode.Body.toString());\n    \n    // Update Lambda function\n    await lambda.updateFunctionCode({\n        FunctionName: 'weather-function',\n        ZipFile: zipBuffer\n    }).promise();\n    \n    console.log('Lambda function updated successfully');\n}\n\nasync function updateS3Website() {\n    // Get API Gateway URL\n    const apiUrl = process.env.API_URL;\n    \n    // Download index.html template\n    const indexTemplate = await s3.getObject({\n        Bucket: process.env.SOURCE_BUCKET,\n        Key: 'index.html'\n    }).promise();\n    \n    // Replace API URL placeholder\n    const updatedHtml = indexTemplate.Body.toString()\n        .replace('YOUR_API_GATEWAY_URL_HERE', apiUrl);\n    \n    // Upload to website bucket\n    await s3.putObject({\n        Bucket: process.env.WEBSITE_BUCKET,\n        Key: 'index.html',\n        Body: updatedHtml,\n        ContentType: 'text/html'\n    }).promise();\n    \n    console.log('S3 website updated successfully');\n}\n\nfunction createZipBuffer(sourceCode) {\n    return new Promise((resolve, reject) =\u003e {\n        const chunks = [];\n        const archive = archiver('zip');\n        \n        archive.on('data', chunk =\u003e chunks.push(chunk));\n        archive.on('end', () =\u003e resolve(Buffer.concat(chunks)));\n        archive.on('error', reject);\n        \n        archive.append(sourceCode, { name: 'index.js' });\n        archive.finalize();\n    });\n}",
                "filename": "index.js"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_zip",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exclude_symlink_directories": null,
            "excludes": null,
            "id": "a9f580e6d8e16c2079ab8cd7847dbfd5df2f1fa1",
            "output_base64sha256": "hUFDEHzSQKn+aEe6NFyUlaUw21qTf4vyG/lgmInyFzE=",
            "output_base64sha512": "iEpZgYB98UkQOvRTnUH+MYjtw5f6AKIR9TYQtbG3H6bkMOfrZmzPdo9ZMKBNX9cM9T92wNkJW+S9lCVt4FVPBg==",
            "output_file_mode": null,
            "output_md5": "ad7b3e5ffd805585e073e79e6ce29a1e",
            "output_path": "weather-function.zip",
            "output_sha": "a9f580e6d8e16c2079ab8cd7847dbfd5df2f1fa1",
            "output_sha256": "854143107cd240a9fe6847ba345c9495a530db5a937f8bf21bf9609889f21731",
            "output_sha512": "884a5981807df149103af4539d41fe3188edc397fa00a211f53610b5b1b71fa6e430e7eb666ccf768f5930a04d5fd70cf53f76c0d9095be4bd94256de0554f06",
            "output_size": 857,
            "source": [
              {
                "content": "const https = require('https');\n\nexports.handler = async (event) =\u003e {\n    const city = event.queryStringParameters?.city || \"London\";\n    const apiKey = process.env.WEATHER_API_KEY;\n    \n    if (!apiKey) {\n        return {\n            statusCode: 500,\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\"\n            },\n            body: JSON.stringify({ error: \"Weather API key not configured\" })\n        };\n    }\n\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}\u0026appid=${apiKey}\u0026units=metric`;\n\n    try {\n        const response = await new Promise((resolve, reject) =\u003e {\n            https.get(url, (res) =\u003e {\n                let data = '';\n                res.on('data', chunk =\u003e data += chunk);\n                res.on('end', () =\u003e {\n                    try {\n                        resolve(JSON.parse(data));\n                    } catch (e) {\n                        reject(e);\n                    }\n                });\n            }).on('error', (err) =\u003e reject(err));\n        });\n\n        if (response.cod !== 200) {\n            return {\n                statusCode: 404,\n                headers: { \n                    \"Content-Type\": \"application/json\",\n                    \"Access-Control-Allow-Origin\": \"*\"\n                },\n                body: JSON.stringify({ error: \"City not found\" })\n            };\n        }\n\n        return {\n            statusCode: 200,\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\"\n            },\n            body: JSON.stringify({\n                city: response.name,\n                temperature: Math.round(response.main.temp),\n                weather: response.weather[0].description,\n                humidity: response.main.humidity,\n                windSpeed: response.wind?.speed || 0\n            })\n        };\n    } catch (error) {\n        return {\n            statusCode: 500,\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\"\n            },\n            body: JSON.stringify({ error: \"Failed to fetch weather data\" })\n        };\n    }\n};",
                "filename": "index.js"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_apigatewayv2_api",
      "name": "weather_api",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "api_endpoint": "https://1tdy3c2ms1.execute-api.ap-south-1.amazonaws.com",
            "api_key_selection_expression": "$request.header.x-api-key",
            "arn": "arn:aws:apigateway:ap-south-1::/apis/1tdy3c2ms1",
            "body": null,
            "cors_configuration": [
              {
                "allow_credentials": false,
                "allow_headers": [
                  "*"
                ],
                "allow_methods": [
                  "GET"
                ],
                "allow_origins": [
                  "*"
                ],
                "expose_headers": [],
                "max_age": 0
              }
            ],
            "credentials_arn": null,
            "description": "",
            "disable_execute_api_endpoint": false,
            "execution_arn": "arn:aws:execute-api:ap-south-1:396907900627:1tdy3c2ms1",
            "fail_on_warnings": null,
            "id": "1tdy3c2ms1",
            "ip_address_type": "ipv4",
            "name": "weather-api",
            "protocol_type": "HTTP",
            "route_key": null,
            "route_selection_expression": "$request.method $request.path",
            "tags": {},
            "tags_all": {},
            "target": null,
            "version": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_apigatewayv2_integration",
      "name": "weather_integration",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "api_id": "1tdy3c2ms1",
            "connection_id": "",
            "connection_type": "INTERNET",
            "content_handling_strategy": "",
            "credentials_arn": "",
            "description": "",
            "id": "f4xocc7",
            "integration_method": "POST",
            "integration_response_selection_expression": "",
            "integration_subtype": "",
            "integration_type": "AWS_PROXY",
            "integration_uri": "arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:396907900627:function:weather-function/invocations",
            "passthrough_behavior": "",
            "payload_format_version": "1.0",
            "request_parameters": {},
            "request_templates": {},
            "response_parameters": [],
            "template_selection_expression": "",
            "timeout_milliseconds": 30000,
            "tls_config": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_iam_role.lambda_role",
            "aws_lambda_function.weather_function",
            "data.archive_file.lambda_zip"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_apigatewayv2_route",
      "name": "weather_route",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "api_id": "1tdy3c2ms1",
            "api_key_required": false,
            "authorization_scopes": [],
            "authorization_type": "NONE",
            "authorizer_id": "",
            "id": "rtftp48",
            "model_selection_expression": "",
            "operation_name": "",
            "request_models": {},
            "request_parameter": [],
            "route_key": "GET /weather",
            "route_response_selection_expression": "",
            "target": "integrations/f4xocc7"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_apigatewayv2_integration.weather_integration",
            "aws_iam_role.lambda_role",
            "aws_lambda_function.weather_function",
            "data.archive_file.lambda_zip"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_apigatewayv2_stage",
      "name": "weather_stage",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_log_settings": [],
            "api_id": "1tdy3c2ms1",
            "arn": "arn:aws:apigateway:ap-south-1::/apis/1tdy3c2ms1/stages/$default",
            "auto_deploy": true,
            "client_certificate_id": "",
            "default_route_settings": [
              {
                "data_trace_enabled": false,
                "detailed_metrics_enabled": false,
                "logging_level": "",
                "throttling_burst_limit": 0,
                "throttling_rate_limit": 0
              }
            ],
            "deployment_id": "fqj0oy",
            "description": "",
            "execution_arn": "arn:aws:execute-api:ap-south-1:396907900627:1tdy3c2ms1/$default",
            "id": "$default",
            "invoke_url": "https://1tdy3c2ms1.execute-api.ap-south-1.amazonaws.com/",
            "name": "$default",
            "route_settings": [],
            "stage_variables": {},
            "tags": {},
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_event_rule",
      "name": "file_change",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:events:ap-south-1:396907900627:rule/weather-file-change",
            "description": "Trigger deployment on file changes",
            "event_bus_name": "default",
            "event_pattern": "{\"detail\":{\"bucket\":{\"name\":[\"weather-source-56qa0x06\"]}},\"detail-type\":[\"Object Created\"],\"source\":[\"aws.s3\"]}",
            "force_destroy": false,
            "id": "weather-file-change",
            "is_enabled": true,
            "name": "weather-file-change",
            "name_prefix": "",
            "role_arn": "",
            "schedule_expression": "",
            "state": "ENABLED",
            "tags": {},
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_s3_bucket.source_bucket",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_event_target",
      "name": "step_function",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "appsync_target": [],
            "arn": "arn:aws:states:ap-south-1:396907900627:stateMachine:weather-app-deploy",
            "batch_target": [],
            "dead_letter_config": [],
            "ecs_target": [],
            "event_bus_name": "default",
            "force_destroy": false,
            "http_target": [],
            "id": "weather-file-change-WeatherDeployTarget",
            "input": "",
            "input_path": "",
            "input_transformer": [],
            "kinesis_target": [],
            "redshift_target": [],
            "retry_policy": [],
            "role_arn": "arn:aws:iam::396907900627:role/weather-eventbridge-role",
            "rule": "weather-file-change",
            "run_command_targets": [],
            "sagemaker_pipeline_target": [],
            "sqs_target": [],
            "target_id": "WeatherDeployTarget"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_cloudwatch_event_rule.file_change",
            "aws_iam_role.deploy_lambda_role",
            "aws_iam_role.eventbridge_role",
            "aws_iam_role.step_function_role",
            "aws_lambda_function.deploy_function",
            "aws_s3_bucket.source_bucket",
            "aws_s3_bucket.website",
            "aws_sfn_state_machine.weather_deploy",
            "data.archive_file.deploy_zip",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "deploy_lambda_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::396907900627:role/weather-deploy-lambda-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-10-22T16:09:43Z",
            "description": "",
            "force_detach_policies": false,
            "id": "weather-deploy-lambda-role",
            "inline_policy": [
              {
                "name": "weather-deploy-lambda-policy",
                "policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"lambda:UpdateFunctionCode\",\"lambda:GetFunction\",\"s3:PutObject\",\"s3:GetObject\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}]}"
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "weather-deploy-lambda-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {},
            "tags_all": {},
            "unique_id": "AROAVY2MN53JTC7PX3HPX"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "eventbridge_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::396907900627:role/weather-eventbridge-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-10-22T16:09:43Z",
            "description": "",
            "force_detach_policies": false,
            "id": "weather-eventbridge-role",
            "inline_policy": [
              {
                "name": "weather-eventbridge-policy",
                "policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"states:StartExecution\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:states:ap-south-1:396907900627:stateMachine:weather-app-deploy\"}]}"
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "weather-eventbridge-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {},
            "tags_all": {},
            "unique_id": "AROAVY2MN53JREPRSN3FX"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "lambda_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::396907900627:role/weather-lambda-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-10-22T15:38:01Z",
            "description": "",
            "force_detach_policies": false,
            "id": "weather-lambda-role",
            "inline_policy": [],
            "managed_policy_arns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "max_session_duration": 3600,
            "name": "weather-lambda-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {},
            "tags_all": {},
            "unique_id": "AROAVY2MN53JYOD4IRSYH"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjAifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "step_function_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::396907900627:role/weather-step-function-role",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"states.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}",
            "create_date": "2025-10-22T16:09:43Z",
            "description": "",
            "force_detach_policies": false,
            "id": "weather-step-function-role",
            "inline_policy": [
              {
                "name": "weather-step-function-policy",
                "policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"lambda:InvokeFunction\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:lambda:ap-south-1:396907900627:function:weather-deploy-function\"}]}"
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "weather-step-function-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": "",
            "tags": {},
            "tags_all": {},
            "unique_id": "AROAVY2MN53JV3ZLYLLN4"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "deploy_lambda_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "weather-deploy-lambda-role:weather-deploy-lambda-policy",
            "name": "weather-deploy-lambda-policy",
            "name_prefix": "",
            "policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"lambda:UpdateFunctionCode\",\"lambda:GetFunction\",\"s3:PutObject\",\"s3:GetObject\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}]}",
            "role": "weather-deploy-lambda-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.deploy_lambda_role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "eventbridge_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "weather-eventbridge-role:weather-eventbridge-policy",
            "name": "weather-eventbridge-policy",
            "name_prefix": "",
            "policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"states:StartExecution\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:states:ap-south-1:396907900627:stateMachine:weather-app-deploy\"}]}",
            "role": "weather-eventbridge-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_iam_role.deploy_lambda_role",
            "aws_iam_role.eventbridge_role",
            "aws_iam_role.step_function_role",
            "aws_lambda_function.deploy_function",
            "aws_s3_bucket.source_bucket",
            "aws_s3_bucket.website",
            "aws_sfn_state_machine.weather_deploy",
            "data.archive_file.deploy_zip",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "step_function_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "weather-step-function-role:weather-step-function-policy",
            "name": "weather-step-function-policy",
            "name_prefix": "",
            "policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"lambda:InvokeFunction\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:lambda:ap-south-1:396907900627:function:weather-deploy-function\"}]}",
            "role": "weather-step-function-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_iam_role.deploy_lambda_role",
            "aws_iam_role.step_function_role",
            "aws_lambda_function.deploy_function",
            "aws_s3_bucket.source_bucket",
            "aws_s3_bucket.website",
            "data.archive_file.deploy_zip",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "lambda_basic",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "weather-lambda-role-20251022160344359800000001",
            "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            "role": "weather-lambda-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.lambda_role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "deploy_function",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:ap-south-1:396907900627:function:weather-deploy-function",
            "code_sha256": "jIlbUKI7jtpJCmJ3dCyjXUxIgZzouGJxo9/xVTK0s2Q=",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "",
            "environment": [
              {
                "variables": {
                  "API_URL": "https://1tdy3c2ms1.execute-api.ap-south-1.amazonaws.com/weather",
                  "SOURCE_BUCKET": "weather-source-56qa0x06",
                  "WEBSITE_BUCKET": "weather-app-56qa0x06"
                }
              }
            ],
            "ephemeral_storage": [
              {
                "size": 512
              }
            ],
            "file_system_config": [],
            "filename": "deploy-function.zip",
            "function_name": "weather-deploy-function",
            "handler": "index.handler",
            "id": "weather-deploy-function",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:396907900627:function:weather-deploy-function/invocations",
            "kms_key_arn": "",
            "last_modified": "2025-10-22T16:10:01.527+0000",
            "layers": [],
            "logging_config": [
              {
                "application_log_level": "",
                "log_format": "Text",
                "log_group": "/aws/lambda/weather-deploy-function",
                "system_log_level": ""
              }
            ],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:ap-south-1:396907900627:function:weather-deploy-function:$LATEST",
            "qualified_invoke_arn": "arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:396907900627:function:weather-deploy-function:$LATEST/invocations",
            "replace_security_groups_on_destroy": null,
            "replacement_security_group_ids": null,
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::396907900627:role/weather-deploy-lambda-role",
            "runtime": "nodejs18.x",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "skip_destroy": false,
            "snap_start": [],
            "source_code_hash": "",
            "source_code_size": 1025,
            "tags": {},
            "tags_all": {},
            "timeout": 60,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_iam_role.deploy_lambda_role",
            "aws_s3_bucket.source_bucket",
            "aws_s3_bucket.website",
            "data.archive_file.deploy_zip",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "weather_function",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:ap-south-1:396907900627:function:weather-function",
            "code_sha256": "axD4yYWqcnkPMjz2TpIyybd36JgfqzUy8fnndQYtDpY=",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "",
            "environment": [
              {
                "variables": {
                  "WEATHER_API_KEY": "8c30e9d1652459b78d1f4e640220c24b"
                }
              }
            ],
            "ephemeral_storage": [
              {
                "size": 512
              }
            ],
            "file_system_config": [],
            "filename": "weather-function.zip",
            "function_name": "weather-function",
            "handler": "index.handler",
            "id": "weather-function",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:396907900627:function:weather-function/invocations",
            "kms_key_arn": "",
            "last_modified": "2025-10-22T16:06:14.000+0000",
            "layers": [],
            "logging_config": [
              {
                "application_log_level": "",
                "log_format": "Text",
                "log_group": "/aws/lambda/weather-function",
                "system_log_level": ""
              }
            ],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:ap-south-1:396907900627:function:weather-function:$LATEST",
            "qualified_invoke_arn": "arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:396907900627:function:weather-function:$LATEST/invocations",
            "replace_security_groups_on_destroy": null,
            "replacement_security_group_ids": null,
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::396907900627:role/weather-lambda-role",
            "runtime": "nodejs18.x",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "skip_destroy": false,
            "snap_start": [],
            "source_code_hash": "",
            "source_code_size": 837,
            "tags": {},
            "tags_all": {},
            "timeout": 3,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "environment"
              },
              {
                "type": "index",
                "value": {
                  "value": 0,
                  "type": "number"
                }
              },
              {
                "type": "get_attr",
                "value": "variables"
              },
              {
                "type": "index",
                "value": {
                  "value": "WEATHER_API_KEY",
                  "type": "string"
                }
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_iam_role.lambda_role",
            "data.archive_file.lambda_zip"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "api_gateway",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "weather-function",
            "function_url_auth_type": null,
            "id": "AllowExecutionFromAPIGateway",
            "principal": "apigateway.amazonaws.com",
            "principal_org_id": null,
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:execute-api:ap-south-1:396907900627:1tdy3c2ms1/*/*",
            "statement_id": "AllowExecutionFromAPIGateway",
            "statement_id_prefix": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_iam_role.lambda_role",
            "aws_lambda_function.weather_function",
            "data.archive_file.lambda_zip"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "source_bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::weather-source-56qa0x06",
            "bucket": "weather-source-56qa0x06",
            "bucket_domain_name": "weather-source-56qa0x06.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "weather-source-56qa0x06.s3.ap-south-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "c3b6bc096869194d95dadb70fc2937faf9f2eafcbaa20835b167522ed89db8ac",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z11RGJOFQNVJUP",
            "id": "weather-source-56qa0x06",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "ap-south-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {},
            "timeouts": null,
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "website",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::weather-app-56qa0x06",
            "bucket": "weather-app-56qa0x06",
            "bucket_domain_name": "weather-app-56qa0x06.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "weather-app-56qa0x06.s3.ap-south-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "c3b6bc096869194d95dadb70fc2937faf9f2eafcbaa20835b167522ed89db8ac",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z11RGJOFQNVJUP",
            "id": "weather-app-56qa0x06",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "{\"Statement\":[{\"Action\":\"s3:GetObject\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"arn:aws:s3:::weather-app-56qa0x06/*\",\"Sid\":\"PublicReadGetObject\"}],\"Version\":\"2012-10-17\"}",
            "region": "ap-south-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {},
            "timeouts": null,
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [
              {
                "error_document": "",
                "index_document": "index.html",
                "redirect_all_requests_to": "",
                "routing_rules": ""
              }
            ],
            "website_domain": "s3-website.ap-south-1.amazonaws.com",
            "website_endpoint": "weather-app-56qa0x06.s3-website.ap-south-1.amazonaws.com"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_notification",
      "name": "source_notification",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "weather-source-56qa0x06",
            "eventbridge": true,
            "id": "weather-source-56qa0x06",
            "lambda_function": [],
            "queue": [],
            "topic": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.source_bucket",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "website",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "weather-app-56qa0x06",
            "id": "weather-app-56qa0x06",
            "policy": "{\"Statement\":[{\"Action\":\"s3:GetObject\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"arn:aws:s3:::weather-app-56qa0x06/*\",\"Sid\":\"PublicReadGetObject\"}],\"Version\":\"2012-10-17\"}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.website",
            "aws_s3_bucket_public_access_block.website",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_public_access_block",
      "name": "website",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "block_public_acls": false,
            "block_public_policy": false,
            "bucket": "weather-app-56qa0x06",
            "id": "weather-app-56qa0x06",
            "ignore_public_acls": false,
            "restrict_public_buckets": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.website",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_website_configuration",
      "name": "website",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "weather-app-56qa0x06",
            "error_document": [],
            "expected_bucket_owner": "",
            "id": "weather-app-56qa0x06",
            "index_document": [
              {
                "suffix": "index.html"
              }
            ],
            "redirect_all_requests_to": [],
            "routing_rule": [],
            "routing_rules": "",
            "website_domain": "s3-website.ap-south-1.amazonaws.com",
            "website_endpoint": "weather-app-56qa0x06.s3-website.ap-south-1.amazonaws.com"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.website",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "index",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::weather-app-56qa0x06/index.html",
            "bucket": "weather-app-56qa0x06",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_crc64nvme": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eCloud Weather Dashboard\u003c/title\u003e\n    \u003cstyle\u003e\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            background: linear-gradient(135deg, #74b9ff, #0984e3);\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n        }\n        .container {\n            max-width: 500px;\n            margin: 0 auto;\n            background: white;\n            padding: 30px;\n            border-radius: 15px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }\n        h1 {\n            color: #2d3436;\n            margin-bottom: 30px;\n        }\n        .input-group {\n            margin-bottom: 20px;\n        }\n        input {\n            padding: 12px;\n            font-size: 16px;\n            border: 2px solid #ddd;\n            border-radius: 8px;\n            width: 200px;\n            margin-right: 10px;\n        }\n        button {\n            padding: 12px 20px;\n            font-size: 16px;\n            background: #0984e3;\n            color: white;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n        }\n        button:hover {\n            background: #74b9ff;\n        }\n        #result {\n            margin-top: 30px;\n            padding: 20px;\n            background: #f8f9fa;\n            border-radius: 10px;\n            display: none;\n        }\n        .weather-info {\n            font-size: 18px;\n            margin: 10px 0;\n        }\n        .error {\n            color: #e74c3c;\n            background: #ffeaa7;\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003ch1\u003e☁️ Cloud Weather Dashboard\u003c/h1\u003e\n        \u003cdiv class=\"input-group\"\u003e\n            \u003cinput type=\"text\" id=\"cityInput\" placeholder=\"Enter city name\" /\u003e\n            \u003cbutton onclick=\"getWeather()\"\u003eGet Weather\u003c/button\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"result\"\u003e\u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript\u003e\n        const API_URL = 'https://1tdy3c2ms1.execute-api.ap-south-1.amazonaws.com/weather'; // Replace with your API Gateway URL\n\n        async function getWeather() {\n            const city = document.getElementById('cityInput').value.trim();\n            const resultDiv = document.getElementById('result');\n            \n            if (!city) {\n                showError('Please enter a city name');\n                return;\n            }\n\n            resultDiv.style.display = 'block';\n            resultDiv.innerHTML = '\u003cp\u003eLoading...\u003c/p\u003e';\n\n            try {\n                const response = await fetch(`${API_URL}?city=${encodeURIComponent(city)}`);\n                const data = await response.json();\n\n                if (response.ok) {\n                    resultDiv.className = '';\n                    resultDiv.innerHTML = `\n                        \u003ch2\u003e🌍 ${data.city}\u003c/h2\u003e\n                        \u003cdiv class=\"weather-info\"\u003e🌡️ Temperature: ${data.temperature}°C\u003c/div\u003e\n                        \u003cdiv class=\"weather-info\"\u003e☁️ Condition: ${data.weather}\u003c/div\u003e\n                        \u003cdiv class=\"weather-info\"\u003e💧 Humidity: ${data.humidity}%\u003c/div\u003e\n                        \u003cdiv class=\"weather-info\"\u003e💨 Wind Speed: ${data.windSpeed} m/s\u003c/div\u003e\n                    `;\n                } else {\n                    showError(data.error || 'Failed to fetch weather data');\n                }\n            } catch (error) {\n                showError('Network error. Please check your connection.');\n            }\n        }\n\n        function showError(message) {\n            const resultDiv = document.getElementById('result');\n            resultDiv.style.display = 'block';\n            resultDiv.className = 'error';\n            resultDiv.innerHTML = `\u003cp\u003e❌ ${message}\u003c/p\u003e`;\n        }\n\n        // Allow Enter key to trigger search\n        document.getElementById('cityInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                getWeather();\n            }\n        });\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "text/html",
            "etag": "a0d11f6539c23a618e340dce8b481af8",
            "force_destroy": false,
            "id": "index.html",
            "key": "index.html",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {},
            "tags_all": {},
            "version_id": "",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_s3_bucket.website",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_sfn_state_machine",
      "name": "weather_deploy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:states:ap-south-1:396907900627:stateMachine:weather-app-deploy",
            "creation_date": "2025-10-22T16:10:08Z",
            "definition": "{\"Comment\":\"Weather App Deployment Pipeline\",\"StartAt\":\"UpdateLambda\",\"States\":{\"UpdateLambda\":{\"Next\":\"UpdateS3\",\"Parameters\":{\"FunctionName\":\"weather-deploy-function\",\"Payload\":{\"action\":\"update_lambda\"}},\"Resource\":\"arn:aws:states:::lambda:invoke\",\"Type\":\"Task\"},\"UpdateS3\":{\"End\":true,\"Parameters\":{\"FunctionName\":\"weather-deploy-function\",\"Payload\":{\"action\":\"update_s3\"}},\"Resource\":\"arn:aws:states:::lambda:invoke\",\"Type\":\"Task\"}}}",
            "description": "",
            "encryption_configuration": [
              {
                "kms_data_key_reuse_period_seconds": 0,
                "kms_key_id": "",
                "type": "AWS_OWNED_KEY"
              }
            ],
            "id": "arn:aws:states:ap-south-1:396907900627:stateMachine:weather-app-deploy",
            "logging_configuration": [
              {
                "include_execution_data": false,
                "level": "OFF",
                "log_destination": ""
              }
            ],
            "name": "weather-app-deploy",
            "name_prefix": "",
            "publish": false,
            "revision_id": "",
            "role_arn": "arn:aws:iam::396907900627:role/weather-step-function-role",
            "state_machine_version_arn": "",
            "status": "ACTIVE",
            "tags": {},
            "tags_all": {},
            "timeouts": null,
            "tracing_configuration": [
              {
                "enabled": false
              }
            ],
            "type": "STANDARD",
            "version_description": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_apigatewayv2_api.weather_api",
            "aws_iam_role.deploy_lambda_role",
            "aws_iam_role.step_function_role",
            "aws_lambda_function.deploy_function",
            "aws_s3_bucket.source_bucket",
            "aws_s3_bucket.website",
            "data.archive_file.deploy_zip",
            "random_string.bucket_suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "bucket_suffix",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "56qa0x06",
            "keepers": null,
            "length": 8,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "56qa0x06",
            "special": false,
            "upper": false
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}
